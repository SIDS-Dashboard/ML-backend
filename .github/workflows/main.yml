env:
  REGISTRY_NAME: acrmlbackend
  CLUSTER_NAME: sidMLBackendCluster
  CLUSTER_RESOURCE_GROUP: ml-backend-group
  NAMESPACE: ml-app
  APP_NAME: sidmlbackend
  STROAGE_ACCOUNT: mlbackendstorage
  IMAGE_NAME: acrmlbackend.azurecr.io/sidmlbackend


on:
  push:
    branches:
    - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@main
    
    # Connect to Azure Container Registry (ACR)
    - name: 'Docker Login'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    # Container build and push to a Azure Container Registry (ACR)
    - name: 'Compose Docker Image'
      shell: bash
      run: |
        docker build -t ${{ env.IMAGE_NAME }}:latest .
        docker push ${{ env.IMAGE_NAME }}:latest

    # Set the target Azure Kubernetes Service (AKS) cluster. 
    
    - name: 'Set the target AKS'
      uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ env.CLUSTER_NAME }}
        resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}

    - name: Rollout pod restart
      run: kubectl rollout restart deployment ${{ env.APP_NAME }}-http --namespace=${{ env.NAMESPACE }}
    
    # # Deploy app to AKS
    # - uses: azure/k8s-deploy@v1
    #   with:
    #     manifests: |
    #       ${{ github.workspace }}/manifests/deployment.yaml
    #       ${{ github.workspace }}/manifests/service.yaml
    #     images: |
    #       ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
    #     imagepullsecrets: |
    #       ${{ env.SECRET }}
    #     namespace: ${{ env.NAMESPACE }}